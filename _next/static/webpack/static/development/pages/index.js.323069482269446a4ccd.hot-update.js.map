{"version":3,"file":"static/webpack/static/development/pages/index.js.323069482269446a4ccd.hot-update.js","sources":["webpack:///./hooks/timer.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\n\nfunction useTimer(ms, onTimeLimitReached, onReset) {\n  let [ expireAt, setExpireAt ] = useState();\n  let intervalRef = useRef();\n  let [lastPaused, setLastPaused] = useState(ms);\n  let [isPaused, setIsPaused] = useState(true);\n  let [ timeData, setTimeData ] = useState({ picked: ms, left: ms });\n\n  useEffect(() => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = undefined;\n    setTimeData({ picked: ms, left: ms})\n    setLastPaused(ms);\n  }, [ms])\n\n  let start = () => { unpause(ms); }\n\n  let unpause = (remainMs) => {\n    let newExpire = Date.now() + remainMs;\n    if (!intervalRef.current) {\n      setIsPaused(false);\n      setExpireAt(Date.now() + remainMs);\n      setTimeData({ picked: ms, left: remainMs });\n\n      intervalRef.current = setInterval(() => {\n        setTimeData(prevTimeData => {\n          if (prevTimeData.left <= 0) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = undefined;\n            setLastPaused(undefined);\n            setIsPaused(true);\n            onTimeLimitReached();\n            return prevTimeData;\n          } else {\n            return { ...prevTimeData, left: Math.max(newExpire - Date.now(), 0) };\n          }\n        });\n      }, 50);\n    }\n  };\n\n  let pause = () => {\n    if (timeData.left === 0) { return; }\n    if (intervalRef.current) {\n      setIsPaused(true);\n      clearInterval(intervalRef.current);\n      setLastPaused(timeData.left);\n      intervalRef.current = undefined;\n    } else {\n      unpause(lastPaused);\n    }\n  }\n  \n  let reset = () => {\n    setTimeData({ picked: ms, left: ms });\n    setLastPaused(ms);\n    setIsPaused(true);\n    onReset();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = undefined;\n    }\n  }\n\n  return {\n    pickedTime: timeData.picked,\n    msLeft: timeData.left,\n    start,\n    pause,\n    reset,\n    isPaused,\n  };\n}\n\nexport default useTimer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AALA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.3374d4fd2c728d29202e.hot-update.js","sources":["webpack:///./components/SelectorRow.js"],"sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit } from '@fortawesome/free-solid-svg-icons'\nimport useLongPress from '../hooks/longPress';\n\nimport { useSpring, animated, useTransition } from 'react-spring';\nimport { useState } from 'react';\n\nimport { selectorRowStyle, selectableStyle } from '../styles';\n\nconst ResetProgressIndicator = ({ resetBarState, setResetBarState }) => {\n  const STANDBY = { width: '0%', opacity: 0.1};\n  const FINISH = { opacity: 0.1, };\n  const START = {}; \n  const MAX = { width: '100%', opacity: 0.8 };\n\n  const resetStates = { STANDBY, START, MAX, FINISH };\n  const resetStyleProps = useSpring(resetStates[resetBarState]);\n  const resetContainerStates =  {\n    STANDBY: { opacity: 0.1 },\n    START: { opacity: 0.5 },\n    MAX: { opacity: 0.5 },\n    FINISH: { opacity: 0.1 }\n  };\n\n  const resetContainerStyleProps = useSpring(resetContainerStates[resetBarState]);\n\n  // return <animated.div className=\"reset-indicator\" style={resetStyleProps}></animated.div>;\n  return <div className=\"edit-indicator-container\">\n    <animated.div className=\"edit-indicator\" style={resetStyleProps}></animated.div>\n    <animated.div className=\"edit-background\" style={resetStyleProps}> </animated.div>\n    <animated.div className=\"edit-icon-container\" style={resetContainerStyleProps}>\n      <FontAwesomeIcon className=\"edit-icon\" icon={faEdit} />\n    </animated.div>\n  </div>\n}\n\n\nconst Selectable = (props) => {\n  let currClassName = 'selectable';\n  let [resetBarState, setResetBarState] = useState('STANDBY');\n  let { ms } = props;\n\n  let { setMode, setEditId } = props;\n  let handlers = {\n    onLongPress:  () => { setEditId(props.idx); setMode('EDIT'); setResetBarState('FINISH'); },\n    onShortPress: () => { props.onReset(); props.setPickedTimeIdx(props.idx) },\n    onClickStart: () => { setResetBarState('START'); },\n    onLongPressGuaranteed:  () => { setResetBarState('MAX'); },\n    onLongPressCancel: () => { setResetBarState('STANDBY'); }\n  };\n\n  if (props.selected) { currClassName += ' selected'; }\n  return <div className={currClassName} {...useLongPress(handlers, 1000, 300)} > \n    <ResetProgressIndicator {...{resetBarState, setResetBarState}} />\n    <div className=\"name\"> <TimeDisplay ms={ms}/> </div>\n    {selectableStyle}\n  </div>\n}\n\nconst TimeDisplay = ({ms}) => {\n  let minutes = Math.floor(ms / 60000);\n  let seconds = Math.floor((ms % 60000) / 1000);\n  return <span className=\"selector-time-left\">\n    { minutes > 0 ? <div className=\"selector-quantity\">{minutes}</div>  : null }\n    { minutes > 0 ? <div className=\"selector-time-unit\">m</div> : null }\n    <div className=\"selector-time-quantity\">{seconds}</div> <div className=\"selector-time-unit\">s</div>\n  </span>;\n}\n\nconst SelectorRow = (props) => {\n  let { setPickedTimeIdx, pickedTimeIdx, data } = props;\n\n  let renderSelectables = (data) => {\n    return data.map((ms, i) => {\n      return <Selectable {...{...props, ms}} selected={pickedTimeIdx === i} key={i} idx={i} />\n    });\n  };\n\n\n  return <div className=\"selector-row\" style={{ display: props.mode === 'EDIT' ? \"none\" : \"flex\"  }}>\n      { renderSelectables(data) }\n    { selectorRowStyle }\n  </div>;\n\n\n}\nexport default SelectorRow;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.ebf6d9d4e387ed36de26.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["\nimport TappableTimer from '../components/TappableTimer';\nimport SelectorRow from '../components/SelectorRow';\nimport TimerEdit from '../components/TimerEdit';\n\nimport { useState, useEffect } from 'react';\n\nimport {Howl, Howler} from 'howler';\nimport Head from 'next/head'\n\n\nconst appStyle = <style jsx=\"true\" global>{`\n* {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n  color: white;\n}\n\n.app {\n  font: 20px Arial;\n  height: 100vh;\n  width: 100vw;\n  color: white;\n}\n\n`}  \n</style>\n\n\nconst useAudio = url => {\n  const [audio] = useState(new Howl({ src: url, loop: true, }));\n  const [playing, setPlaying] = useState(false);\n  useEffect(() => { playing ? audio.play() : audio.pause(); }, [playing]);\n  return [playing, () => setPlaying(true), () => setPlaying(false)];\n};\n\nconst DEFAULT_DATA = [ 5000, 30000, 90000 ];\nconst Index = () => {\n  let [ timers, setTimers ] = useState(DEFAULT_DATA);\n  let [ pickedTimeIdx, setPickedTimeIdx ] = useState(0);\n  let [ mode, setMode ] = useState('TIMER'); // 'TIMER' or 'EDIT'\n  let [ editId, setEditId ] = useState(0);\n  let [ playing, ring, stop] = useAudio('https://kwanjack.github.io/timer/alarm.mp3');\n\n  useEffect(() => {\n    let userTimers = JSON.parse(localStorage.getItem('userTimers'));\n    if (userTimers) {\n      setTimers(userTimers);\n    } else {\n      localStorage.setItem('userTimers', JSON.stringify(DEFAULT_DATA));\n      setTimers(DEFAULT_DATA);\n    }\n  }, []);\n\n  let setTimersWrapper = (f) => {\n    setTimers(f);\n    let newVal = f(timers);\n    localStorage.setItem('userTimers', JSON.stringify(newVal));\n  }\n\n  let header = <Head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta charSet=\"utf-8\" />\n    <title>Timer</title>\n  </Head>;\n\n  return <div className=\"app\">\n      { header }\n      <TimerEdit {...{ mode, editId, setMode, setTimers: setTimersWrapper }}/>\n      <SelectorRow data={timers} {...{stop, pickedTimeIdx, setPickedTimeIdx, setMode, setEditId, mode }}/>\n      <TappableTimer {...{onReset: stop, onTimeLimitReached: ring, mode }} pickedTime={timers[pickedTimeIdx]} />\n      { appStyle }\n    </div>\n  };\n  \n  export default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}